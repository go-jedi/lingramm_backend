stages:
  - setup
  - lint
  - test
  - build
  - deploy_image

variables:
  GO_VERSION: "1.24.4"
  GOCACHE: "$CI_PROJECT_DIR/.cache/go-build"
  GO111MODULE: "on"
  REDIS_ADDR: redis:6379
  REDIS_PASSWORD: admin
  REDIS_PORT: 6379
  REDIS_DATABASES: 0

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/go-build
    - go.sum
    - go.mod

.setup_go: &setup_go
  image: golang:${GO_VERSION}
  before_script:
    - apt-get update && apt-get install -y libvips-dev redis-tools
    - go version
    - go mod download

.wait_for_redis: &wait_for_redis |
  echo "Waiting for Redis..."
  for i in {1..10}; do
    if redis-cli -h redis ping | grep -q PONG; then
      echo "Redis is ready."
      break
    fi
    echo "Retrying in 1s..."
    sleep 1
    if [ $i -eq 10 ]; then
      echo "Redis not ready in time."
      exit 1
    fi
  done

setup:
  stage: setup
  <<: *setup_go
  script:
    - echo "Setting up Go version $GO_VERSION"

lint:
  stage: lint
  <<: *setup_go
  script:
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.5
    - export PATH="$(go env GOPATH)/bin:$PATH"
    - golangci-lint run ./...

validate:
  stage: lint
  <<: *setup_go
  script:
    - go mod tidy
    - git diff --exit-code go.mod go.sum || (echo "Uncommitted changes in go.mod/go.sum"; exit 1)

security:
  stage: lint
  <<: *setup_go
  script:
    - go install github.com/securego/gosec/v2/cmd/gosec@latest
    - export PATH="$(go env GOPATH)/bin:$PATH"
    - gosec ./...

critic:
  stage: lint
  <<: *setup_go
  script:
    - go install github.com/go-critic/go-critic/cmd/gocritic@latest
    - export PATH="$(go env GOPATH)/bin:$PATH"
    - gocritic check ./...

govulncheck:
  stage: lint
  <<: *setup_go
  script:
    - go install golang.org/x/vuln/cmd/govulncheck@latest
    - export PATH="$(go env GOPATH)/bin:$PATH"
    - govulncheck ./...

test:
  stage: test
  <<: *setup_go
  services:
    - name: redis:latest
      alias: redis
  script:
    - go mod tidy
    - |
      if ! git diff --exit-code go.mod go.sum; then
        echo "Uncommitted changes after go mod tidy"
        exit 1
      fi
    - *wait_for_redis
    - go test -v $(go list ./... | grep -Ev "/(mock|mocks|testdata|cmd|config|domain|apperrors)")

coverage:
  stage: test
  <<: *setup_go
  services:
    - name: redis:latest
      alias: redis
  script:
    - *wait_for_redis
    - go test -coverprofile=coverage.out $(go list ./... | grep -Ev "/(mock|mocks|testdata|cmd|config|domain|apperrors)")
    - go tool cover -func=coverage.out
    - go tool cover -html=coverage.out -o coverage.html
    # Uncomment to enforce threshold
    # - |
    #   percent=$(go tool cover -func=coverage.out | grep total: | awk '{print substr($3, 1, length($3)-1)}')
    #   echo "Total coverage: $percent%"
    #   threshold=70.0
    #   if (( $(echo "$percent < $threshold" | bc -l) )); then
    #     echo "Coverage is below $threshold%"
    #     exit 1
    #   fi
  artifacts:
    paths:
      - coverage.out
      - coverage.html
    expire_in: 1 week
  coverage: '/total:\s+\d+\.\d+%/'

build:
  stage: build
  <<: *setup_go
  needs: [lint, validate, security, critic, govulncheck, test, coverage]
  script:
    - mkdir -p .bin
    - go build -ldflags="-s -w" -trimpath -buildvcs=false -o .bin/app cmd/app/main.go
  artifacts:
    paths:
      - .bin/app
    name: "app-binary-$CI_COMMIT_SHA"
    expire_in: 1 week

docker:
  stage: deploy_image
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  needs: [build]
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - docker build -t $DOCKERHUB_USERNAME/lingramm_backend:$CI_COMMIT_SHA .
    - docker tag $DOCKERHUB_USERNAME/lingramm_backend:$CI_COMMIT_SHA $DOCKERHUB_USERNAME/lingramm_backend:latest
    - docker push $DOCKERHUB_USERNAME/lingramm_backend:$CI_COMMIT_SHA
    - docker push $DOCKERHUB_USERNAME/lingramm_backend:latest
  only:
    - main
  when: manual

harbor:
  stage: deploy_image
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  needs: [build]
  before_script:
    - echo "$HARBOR_PASSWORD" | docker login $HARBOR_REGISTRY -u "$HARBOR_USERNAME" --password-stdin
  script:
    - IMAGE_NAME=$HARBOR_REGISTRY/$HARBOR_PROJECT/lingramm_backend
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA .
    - docker tag $IMAGE_NAME:$CI_COMMIT_SHA $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest
  only:
    - main
  when: manual