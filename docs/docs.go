// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/auth/check": {
            "post": {
                "description": "Check if the provided Telegram ID and token are valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Check user token",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Check request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.CheckDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful check user token",
                        "schema": {
                            "$ref": "#/definitions/auth.CheckSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/refresh": {
            "post": {
                "description": "Refresh the access token using the provided Telegram ID and refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh user token",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Refresh request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with new tokens",
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/signin": {
            "post": {
                "description": "Sign in a user using their Telegram ID, username, first name, and last name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign in user",
                "parameters": [
                    {
                        "description": "Sign in request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SignInDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with tokens",
                        "schema": {
                            "$ref": "#/definitions/auth.SignInSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.CheckDTO": {
            "type": "object",
            "required": [
                "telegram_id",
                "token"
            ],
            "properties": {
                "telegram_id": {
                    "type": "string",
                    "minLength": 1
                },
                "token": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "auth.CheckResponse": {
            "type": "object",
            "properties": {
                "exp_at": {
                    "type": "string"
                },
                "telegram_id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "auth.CheckSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/auth.CheckResponse"
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "auth.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "auth.RefreshDTO": {
            "type": "object",
            "required": [
                "refresh_token",
                "telegram_id"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "minLength": 1
                },
                "telegram_id": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "auth.RefreshResponse": {
            "type": "object",
            "properties": {
                "access_exp_at": {
                    "type": "string"
                },
                "access_token": {
                    "type": "string"
                },
                "refresh_exp_at": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "auth.RefreshSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/auth.RefreshResponse"
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "auth.SignInDTO": {
            "type": "object",
            "required": [
                "telegram_id"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "minLength": 1
                },
                "last_name": {
                    "type": "string",
                    "minLength": 1
                },
                "telegram_id": {
                    "type": "string",
                    "minLength": 1
                },
                "username": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "auth.SignInResp": {
            "type": "object",
            "properties": {
                "access_exp_at": {
                    "type": "string"
                },
                "access_token": {
                    "type": "string"
                },
                "refresh_exp_at": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "auth.SignInSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/auth.SignInResp"
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:50050",
	BasePath:         "/v1.",
	Schemes:          []string{},
	Title:            "Lingramm API — Telegram Web App Backend",
	Description:      "This is the backend API for the Lingramm Telegram Web Application.\nIt provides endpoints for user interactions, game logic, statistics, tools, and more.\nAll endpoints are secured and optimized for real-time communication with Telegram Mini Apps.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
