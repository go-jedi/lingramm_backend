// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/achievement": {
            "post": {
                "description": "Creates an achievement with name, type, optional description, and uploads for achievement \u0026 award images (multipart/form-data).",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Achievement"
                ],
                "summary": "Create achievement (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Achievement name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Achievement type identifier",
                        "name": "achievement_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Achievement image file",
                        "name": "file_achievement",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Award image file",
                        "name": "file_award",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/achievement.DetailSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/achievement.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/achievement.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/achievement/all": {
            "get": {
                "description": "Returns a full list of achievements with their condition, achievement assets and award assets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Achievement"
                ],
                "summary": "Get all achievement details (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/achievement.AllDetailSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/achievement.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/achievement.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/achievement/id/{achievementID}": {
            "get": {
                "description": "Returns the achievement and its related assets (achievement \u0026 award) by the given achievementID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Achievement"
                ],
                "summary": "Get achievement detail by ID (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Achievement ID",
                        "name": "achievementID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/achievement.DetailSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/achievement.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/achievement.ErrorSwaggerResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the achievement and its related assets by the given achievementID. Returns the deleted record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Achievement"
                ],
                "summary": "Delete achievement detail by ID (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Achievement ID",
                        "name": "achievementID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/achievement.DetailSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/achievement.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/achievement.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/admin/add/{telegramID}": {
            "get": {
                "description": "Grants admin role to the user with the given Telegram ID and returns the created admin record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Add admin user (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Telegram ID",
                        "name": "telegramID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/admin.AddAdminUserSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/admin.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/admin.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/admin/exists/{telegramID}/exists": {
            "get": {
                "description": "Returns true if a user with the given Telegram ID is an admin, false otherwise.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Check admin existence by Telegram ID (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Telegram ID",
                        "name": "telegramID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/admin.ExistsSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/admin.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/admin.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/check": {
            "post": {
                "description": "Check if the provided Telegram ID and token are valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Check user token",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Check request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.CheckDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful check user token",
                        "schema": {
                            "$ref": "#/definitions/auth.CheckSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/refresh": {
            "post": {
                "description": "Refresh the access token using the provided Telegram ID and refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh user token",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Refresh request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with new tokens",
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/signin": {
            "post": {
                "description": "Sign in a user using their Telegram ID, username, first name, and last name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign in user",
                "parameters": [
                    {
                        "description": "Sign in request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SignInDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with tokens",
                        "schema": {
                            "$ref": "#/definitions/auth.SignInSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/bigcache/info": {
            "get": {
                "description": "Iterates over BigCache and returns a map of entries (keys/values) for inspection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Big cache"
                ],
                "summary": "Iterate BigCache (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with BigCache entries",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/daily_task": {
            "post": {
                "description": "Creates a daily task record. **At least one** of the ` + "`" + `*_need` + "`" + ` fields must be provided and greater than 0.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Daily task"
                ],
                "summary": "Create daily task (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Daily task data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dailytask.CreateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/dailytask.CreateDailyTaskSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/dailytask.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dailytask.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/event": {
            "post": {
                "description": "Creates an events payload for a user: specify ` + "`" + `telegram_id` + "`" + `, an ` + "`" + `event_type` + "`" + `, and optional action counters (each provided value must be \u003e 0).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Create events",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Events payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/event.CreateEventsDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/event.CreateSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/event.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/event.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/event_type": {
            "post": {
                "description": "Creates an event type with XP reward and optional amount/notification. Rules:\n• ` + "`" + `xp` + "`" + ` is required and must be \u003e 0\n• if ` + "`" + `amount` + "`" + ` is provided, it must be \u003e 0\n• if ` + "`" + `is_send_notification` + "`" + ` is true, ` + "`" + `notification_message` + "`" + ` must be provided",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event type"
                ],
                "summary": "Create event type (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Event type data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/eventtype.CreateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/eventtype.CreateSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/eventtype.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/eventtype.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/event_type/all": {
            "get": {
                "description": "Returns a full list of event types with XP reward, optional amount, and notification settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event type"
                ],
                "summary": "Get all event types (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/eventtype.AllSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/eventtype.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/event_type/name": {
            "get": {
                "description": "Returns a single event type matched by the provided ` + "`" + `name` + "`" + ` query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event type"
                ],
                "summary": "Get event type by name (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event type name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/eventtype.GetByNameSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/eventtype.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/eventtype.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/experience_point/leaderboard/week_top": {
            "post": {
                "description": "Returns the top users by XP for the current week in the given timezone.\nRules:\n• ` + "`" + `limit` + "`" + ` is required, must be \u003e 0 and ≤ 30\n• ` + "`" + `tz` + "`" + ` is required and must be ` + "`" + `Europe/Moscow` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Experience point"
                ],
                "summary": "Get weekly leaderboard (XP)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Leaderboard request",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/experiencepoint.GetLeaderboardTopWeekDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/experiencepoint.GetLeaderboardTopWeekSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/experiencepoint.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/experiencepoint.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/experience_point/leaderboard/week_top/user": {
            "post": {
                "description": "Returns the weekly XP leaderboard centered around the specified user (by Telegram ID).\nRules:\n• ` + "`" + `limit` + "`" + ` is required, must be \u003e 0 and ≤ 30\n• ` + "`" + `telegram_id` + "`" + ` is required\n• ` + "`" + `tz` + "`" + ` is required and must be ` + "`" + `Europe/Moscow` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Experience point"
                ],
                "summary": "Get weekly leaderboard for user (XP)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Leaderboard request for user",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/experiencepoint.GetLeaderboardTopWeekForUserDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/experiencepoint.GetLeaderboardTopWeekForUserSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/experiencepoint.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/experiencepoint.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/fs/client_assets": {
            "post": {
                "description": "Uploads a single image file (multipart/form-data) to create a client asset. Only supported image content types are accepted.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client asset"
                ],
                "summary": "Upload client asset (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image file to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/clientassets.CreateSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/clientassets.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/clientassets.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/fs/client_assets/all": {
            "get": {
                "description": "Returns a full list of uploaded client asset images and their metadata.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client asset"
                ],
                "summary": "Get all client assets (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/clientassets.AllSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/clientassets.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/fs/client_assets/id/{id}": {
            "delete": {
                "description": "Deletes the client asset with the given ID and returns the deleted record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client asset"
                ],
                "summary": "Delete client asset by ID (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client asset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/clientassets.DeleteByIDSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/clientassets.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/clientassets.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/v1/internal_currency/user/balance/telegram/{telegramID}": {
            "get": {
                "description": "Returns the current internal currency balance for the user identified by Telegram ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Internal currency"
                ],
                "summary": "Get user balance",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Telegram ID",
                        "name": "telegramID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/userbalance.GetUserBalanceSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request error",
                        "schema": {
                            "$ref": "#/definitions/userbalance.ErrorSwaggerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/userbalance.ErrorSwaggerResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "achievement.AllDetailSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "achievement": {
                                "type": "object",
                                "properties": {
                                    "achievement_assets_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "achievement_type_id": {
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "award_assets_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "example": "2025-09-02T12:48:06.37622+03:00"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "description"
                                    },
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "two dialogs"
                                    },
                                    "updated_at": {
                                        "type": "string",
                                        "example": "2025-09-02T12:48:06.37622+03:00"
                                    }
                                }
                            },
                            "achievement_assets": {
                                "type": "object",
                                "properties": {
                                    "client_path_file": {
                                        "type": "string",
                                        "example": "/images/achievement/01K44X76FBXJYK4D153WHZFXH7.webp"
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "example": "2025-09-02T12:48:06.37622+03:00"
                                    },
                                    "extension": {
                                        "type": "string",
                                        "example": ".webp"
                                    },
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name_file": {
                                        "type": "string",
                                        "example": "01K44X76FBXJYK4D153WHZFXH7.webp"
                                    },
                                    "name_file_without_extension": {
                                        "type": "string",
                                        "example": "01K44X76FBXJYK4D153WHZFXH7"
                                    },
                                    "old_extension": {
                                        "type": "string",
                                        "example": ".png"
                                    },
                                    "old_name_file": {
                                        "type": "string",
                                        "example": "img.png"
                                    },
                                    "quality": {
                                        "type": "integer",
                                        "example": 30
                                    },
                                    "server_path_file": {
                                        "type": "string",
                                        "example": "testdata/file_server/images/achievement/01K44X76FBXJYK4D153WHZFXH7.webp"
                                    },
                                    "updated_at": {
                                        "type": "string",
                                        "example": "2025-09-02T12:48:06.37622+03:00"
                                    }
                                }
                            },
                            "award_assets": {
                                "type": "object",
                                "properties": {
                                    "client_path_file": {
                                        "type": "string",
                                        "example": "/images/award/01K44X76GAFBZBJ1W1WX4NSJT4.webp"
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "example": "2025-09-02T12:48:06.37622+03:00"
                                    },
                                    "extension": {
                                        "type": "string",
                                        "example": ".webp"
                                    },
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name_file": {
                                        "type": "string",
                                        "example": "01K44X76GAFBZBJ1W1WX4NSJT4.webp"
                                    },
                                    "name_file_without_extension": {
                                        "type": "string",
                                        "example": "01K44X76GAFBZBJ1W1WX4NSJT4"
                                    },
                                    "old_extension": {
                                        "type": "string",
                                        "example": ".jpg"
                                    },
                                    "old_name_file": {
                                        "type": "string",
                                        "example": "img.jpg"
                                    },
                                    "quality": {
                                        "type": "integer",
                                        "example": 30
                                    },
                                    "server_path_file": {
                                        "type": "string",
                                        "example": "testdata/file_server/images/award/01K44X76GAFBZBJ1W1WX4NSJT4.webp"
                                    },
                                    "updated_at": {
                                        "type": "string",
                                        "example": "2025-09-02T12:48:06.37622+03:00"
                                    }
                                }
                            }
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "achievement.DetailSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "achievement": {
                            "type": "object",
                            "properties": {
                                "achievement_assets_id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "achievement_type_id": {
                                    "type": "integer",
                                    "example": 3
                                },
                                "award_assets_id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "created_at": {
                                    "type": "string",
                                    "example": "2025-09-02T12:48:06.37622+03:00"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "description"
                                },
                                "id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "name": {
                                    "type": "string",
                                    "example": "two dialogs"
                                },
                                "updated_at": {
                                    "type": "string",
                                    "example": "2025-09-02T12:48:06.37622+03:00"
                                }
                            }
                        },
                        "achievement_assets": {
                            "type": "object",
                            "properties": {
                                "client_path_file": {
                                    "type": "string",
                                    "example": "/images/achievement/01K44X76FBXJYK4D153WHZFXH7.webp"
                                },
                                "created_at": {
                                    "type": "string",
                                    "example": "2025-09-02T12:48:06.37622+03:00"
                                },
                                "extension": {
                                    "type": "string",
                                    "example": ".webp"
                                },
                                "id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "name_file": {
                                    "type": "string",
                                    "example": "01K44X76FBXJYK4D153WHZFXH7.webp"
                                },
                                "name_file_without_extension": {
                                    "type": "string",
                                    "example": "01K44X76FBXJYK4D153WHZFXH7"
                                },
                                "old_extension": {
                                    "type": "string",
                                    "example": ".png"
                                },
                                "old_name_file": {
                                    "type": "string",
                                    "example": "img.png"
                                },
                                "quality": {
                                    "type": "integer",
                                    "example": 30
                                },
                                "server_path_file": {
                                    "type": "string",
                                    "example": "testdata/file_server/images/achievement/01K44X76FBXJYK4D153WHZFXH7.webp"
                                },
                                "updated_at": {
                                    "type": "string",
                                    "example": "2025-09-02T12:48:06.37622+03:00"
                                }
                            }
                        },
                        "award_assets": {
                            "type": "object",
                            "properties": {
                                "client_path_file": {
                                    "type": "string",
                                    "example": "/images/award/01K44X76GAFBZBJ1W1WX4NSJT4.webp"
                                },
                                "created_at": {
                                    "type": "string",
                                    "example": "2025-09-02T12:48:06.37622+03:00"
                                },
                                "extension": {
                                    "type": "string",
                                    "example": ".webp"
                                },
                                "id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "name_file": {
                                    "type": "string",
                                    "example": "01K44X76GAFBZBJ1W1WX4NSJT4.webp"
                                },
                                "name_file_without_extension": {
                                    "type": "string",
                                    "example": "01K44X76GAFBZBJ1W1WX4NSJT4"
                                },
                                "old_extension": {
                                    "type": "string",
                                    "example": ".jpg"
                                },
                                "old_name_file": {
                                    "type": "string",
                                    "example": "img.jpg"
                                },
                                "quality": {
                                    "type": "integer",
                                    "example": 30
                                },
                                "server_path_file": {
                                    "type": "string",
                                    "example": "testdata/file_server/images/award/01K44X76GAFBZBJ1W1WX4NSJT4.webp"
                                },
                                "updated_at": {
                                    "type": "string",
                                    "example": "2025-09-02T12:48:06.37622+03:00"
                                }
                            }
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "achievement.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "admin.AddAdminUserSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "created_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        },
                        "id": {
                            "type": "integer",
                            "example": 1
                        },
                        "telegram_id": {
                            "type": "string",
                            "example": "1"
                        },
                        "updated_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "admin.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "admin.ExistsSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "boolean",
                    "example": true
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "auth.CheckDTO": {
            "type": "object",
            "required": [
                "telegram_id",
                "token"
            ],
            "properties": {
                "telegram_id": {
                    "type": "string",
                    "minLength": 1
                },
                "token": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "auth.CheckSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "exp_at": {
                            "type": "string",
                            "example": "2025-09-02T15:30:20.095307198+03:00"
                        },
                        "telegram_id": {
                            "type": "string",
                            "example": "1"
                        },
                        "token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTY4MTYyMjAsImlhdCI6MTc1NjgxMjYyMH0.F39iYi6QaEEeQ9pTBO4HL_sOyfaAjRJs7IQiCSQihGE"
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "auth.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "auth.RefreshDTO": {
            "type": "object",
            "required": [
                "refresh_token",
                "telegram_id"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "minLength": 1
                },
                "telegram_id": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "auth.RefreshSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "access_exp_at": {
                            "type": "string",
                            "example": "2025-09-02T15:30:20.095307198+03:00"
                        },
                        "access_token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTY4MTYyMjAsImlhdCI6MTc1NjgxMjYyMH0.F39iYi6QaEEeQ9pTBO4HL_sOyfaAjRJs7IQiCSQihGE"
                        },
                        "refresh_exp_at": {
                            "type": "string",
                            "example": "2025-09-02T15:30:20.095307198+03:00"
                        },
                        "refresh_token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTc0MTc0MjAsImlhdCI6MTc1NjgxMjYyMH0.BTdkTO_6gMG_zmGi1kse2bXoTJ9iU5SZUSl6Pp4upYk"
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "auth.SignInDTO": {
            "type": "object",
            "required": [
                "telegram_id"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "minLength": 1
                },
                "last_name": {
                    "type": "string",
                    "minLength": 1
                },
                "telegram_id": {
                    "type": "string",
                    "minLength": 1
                },
                "username": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "auth.SignInSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "access_exp_at": {
                            "type": "string",
                            "example": "2025-09-02T15:30:20.095307198+03:00"
                        },
                        "access_token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTY4MTYyMjAsImlhdCI6MTc1NjgxMjYyMH0.F39iYi6QaEEeQ9pTBO4HL_sOyfaAjRJs7IQiCSQihGE"
                        },
                        "refresh_exp_at": {
                            "type": "string",
                            "example": "2025-09-02T15:30:20.095307198+03:00"
                        },
                        "refresh_token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTc0MTc0MjAsImlhdCI6MTc1NjgxMjYyMH0.BTdkTO_6gMG_zmGi1kse2bXoTJ9iU5SZUSl6Pp4upYk"
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "clientassets.AllSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "client_path_file": {
                                "type": "string",
                                "example": "/images/client/01K44X76FBXJYK4D153WHZFXH7.webp"
                            },
                            "created_at": {
                                "type": "string",
                                "example": "2025-09-02T12:48:06.37622+03:00"
                            },
                            "extension": {
                                "type": "string",
                                "example": ".webp"
                            },
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name_file": {
                                "type": "string",
                                "example": "01K44X76FBXJYK4D153WHZFXH7.webp"
                            },
                            "name_file_without_extension": {
                                "type": "string",
                                "example": "01K44X76FBXJYK4D153WHZFXH7"
                            },
                            "old_extension": {
                                "type": "string",
                                "example": ".png"
                            },
                            "old_name_file": {
                                "type": "string",
                                "example": "img.png"
                            },
                            "quality": {
                                "type": "integer",
                                "example": 30
                            },
                            "server_path_file": {
                                "type": "string",
                                "example": "testdata/file_server/images/client/01K44X76FBXJYK4D153WHZFXH7.webp"
                            },
                            "updated_at": {
                                "type": "string",
                                "example": "2025-09-02T12:48:06.37622+03:00"
                            }
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "clientassets.CreateSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "client_path_file": {
                            "type": "string",
                            "example": "/images/client/01K44X76FBXJYK4D153WHZFXH7.webp"
                        },
                        "created_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        },
                        "extension": {
                            "type": "string",
                            "example": ".webp"
                        },
                        "id": {
                            "type": "integer",
                            "example": 1
                        },
                        "name_file": {
                            "type": "string",
                            "example": "01K44X76FBXJYK4D153WHZFXH7.webp"
                        },
                        "name_file_without_extension": {
                            "type": "string",
                            "example": "01K44X76FBXJYK4D153WHZFXH7"
                        },
                        "old_extension": {
                            "type": "string",
                            "example": ".png"
                        },
                        "old_name_file": {
                            "type": "string",
                            "example": "img.png"
                        },
                        "quality": {
                            "type": "integer",
                            "example": 30
                        },
                        "server_path_file": {
                            "type": "string",
                            "example": "testdata/file_server/images/client/01K44X76FBXJYK4D153WHZFXH7.webp"
                        },
                        "updated_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "clientassets.DeleteByIDSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "client_path_file": {
                                "type": "string",
                                "example": "/images/client/01K44X76FBXJYK4D153WHZFXH7.webp"
                            },
                            "created_at": {
                                "type": "string",
                                "example": "2025-09-02T12:48:06.37622+03:00"
                            },
                            "extension": {
                                "type": "string",
                                "example": ".webp"
                            },
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name_file": {
                                "type": "string",
                                "example": "01K44X76FBXJYK4D153WHZFXH7.webp"
                            },
                            "name_file_without_extension": {
                                "type": "string",
                                "example": "01K44X76FBXJYK4D153WHZFXH7"
                            },
                            "old_extension": {
                                "type": "string",
                                "example": ".png"
                            },
                            "old_name_file": {
                                "type": "string",
                                "example": "img.png"
                            },
                            "quality": {
                                "type": "integer",
                                "example": 30
                            },
                            "server_path_file": {
                                "type": "string",
                                "example": "testdata/file_server/images/client/01K44X76FBXJYK4D153WHZFXH7.webp"
                            },
                            "updated_at": {
                                "type": "string",
                                "example": "2025-09-02T12:48:06.37622+03:00"
                            }
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "clientassets.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "dailytask.CreateDTO": {
            "type": "object",
            "properties": {
                "dialog_completed_need": {
                    "type": "integer"
                },
                "experience_points_need": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "lessons_finished_need": {
                    "type": "integer"
                },
                "tasks_completed_need": {
                    "type": "integer"
                },
                "words_learned_need": {
                    "type": "integer"
                },
                "words_translate_need": {
                    "type": "integer"
                }
            }
        },
        "dailytask.CreateDailyTaskSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "created_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        },
                        "dialog_completed_need": {
                            "type": "integer",
                            "example": 1
                        },
                        "experience_points_need": {
                            "type": "integer",
                            "example": 1
                        },
                        "id": {
                            "type": "integer",
                            "example": 1
                        },
                        "is_active": {
                            "type": "boolean",
                            "example": true
                        },
                        "lessons_finished_need": {
                            "type": "integer",
                            "example": 1
                        },
                        "tasks_completed_need": {
                            "type": "integer",
                            "example": 1
                        },
                        "updated_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        },
                        "words_learned_need": {
                            "type": "integer",
                            "example": 1
                        },
                        "words_translate_need": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "dailytask.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "event.Actions": {
            "type": "object",
            "properties": {
                "dialog_completed": {
                    "type": "integer"
                },
                "lessons_finished": {
                    "type": "integer"
                },
                "tasks_completed": {
                    "type": "integer"
                },
                "words_learned": {
                    "type": "integer"
                },
                "words_translate": {
                    "type": "integer"
                }
            }
        },
        "event.CreateEventsDTO": {
            "type": "object",
            "required": [
                "actions",
                "event_type",
                "telegram_id"
            ],
            "properties": {
                "actions": {
                    "$ref": "#/definitions/event.Actions"
                },
                "event_type": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "telegram_id": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "event.CreateSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "event.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "eventtype.AllSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "amount": {
                                "type": "integer",
                                "example": 10
                            },
                            "created_at": {
                                "type": "string",
                                "example": "2025-09-02T12:48:06.37622+03:00"
                            },
                            "description": {
                                "type": "string",
                                "example": "some description"
                            },
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "is_active": {
                                "type": "boolean",
                                "example": true
                            },
                            "is_send_notification": {
                                "type": "boolean",
                                "example": true
                            },
                            "name": {
                                "type": "string",
                                "example": "some name"
                            },
                            "notification_message": {
                                "type": "string",
                                "example": "some message"
                            },
                            "updated_at": {
                                "type": "string",
                                "example": "2025-09-02T12:48:06.37622+03:00"
                            },
                            "xp": {
                                "type": "integer",
                                "example": 20
                            }
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "eventtype.CreateDTO": {
            "type": "object",
            "required": [
                "name",
                "xp"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "description": {
                    "type": "string",
                    "minLength": 1
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_send_notification": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "minLength": 1
                },
                "notification_message": {
                    "type": "string",
                    "minLength": 1
                },
                "xp": {
                    "type": "integer"
                }
            }
        },
        "eventtype.CreateSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "amount": {
                            "type": "integer",
                            "example": 10
                        },
                        "created_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        },
                        "description": {
                            "type": "string",
                            "example": "some description"
                        },
                        "id": {
                            "type": "integer",
                            "example": 1
                        },
                        "is_active": {
                            "type": "boolean",
                            "example": true
                        },
                        "is_send_notification": {
                            "type": "boolean",
                            "example": true
                        },
                        "name": {
                            "type": "string",
                            "example": "some name"
                        },
                        "notification_message": {
                            "type": "string",
                            "example": "some message"
                        },
                        "updated_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        },
                        "xp": {
                            "type": "integer",
                            "example": 20
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "eventtype.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "eventtype.GetByNameSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "amount": {
                                "type": "integer",
                                "example": 10
                            },
                            "created_at": {
                                "type": "string",
                                "example": "2025-09-02T12:48:06.37622+03:00"
                            },
                            "description": {
                                "type": "string",
                                "example": "some description"
                            },
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "is_active": {
                                "type": "boolean",
                                "example": true
                            },
                            "is_send_notification": {
                                "type": "boolean",
                                "example": true
                            },
                            "name": {
                                "type": "string",
                                "example": "some name"
                            },
                            "notification_message": {
                                "type": "string",
                                "example": "some message"
                            },
                            "updated_at": {
                                "type": "string",
                                "example": "2025-09-02T12:48:06.37622+03:00"
                            },
                            "xp": {
                                "type": "integer",
                                "example": 20
                            }
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "experiencepoint.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "experiencepoint.GetLeaderboardTopWeekDTO": {
            "type": "object",
            "required": [
                "limit",
                "tz"
            ],
            "properties": {
                "limit": {
                    "type": "integer",
                    "maximum": 30
                },
                "tz": {
                    "type": "string",
                    "enum": [
                        "Europe/Moscow"
                    ]
                }
            }
        },
        "experiencepoint.GetLeaderboardTopWeekForUserDTO": {
            "type": "object",
            "required": [
                "limit",
                "telegram_id",
                "tz"
            ],
            "properties": {
                "limit": {
                    "type": "integer",
                    "maximum": 30
                },
                "telegram_id": {
                    "type": "string",
                    "minLength": 1
                },
                "tz": {
                    "type": "string",
                    "enum": [
                        "Europe/Moscow"
                    ]
                }
            }
        },
        "experiencepoint.GetLeaderboardTopWeekForUserSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "display_name": {
                                "type": "string",
                                "example": "some name"
                            },
                            "medal": {
                                "type": "string",
                                "example": "some medal"
                            },
                            "position": {
                                "type": "integer",
                                "example": 1
                            },
                            "telegram_id": {
                                "type": "string",
                                "example": "1"
                            },
                            "xp": {
                                "type": "integer",
                                "example": 20
                            }
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "experiencepoint.GetLeaderboardTopWeekSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "display_name": {
                                "type": "string",
                                "example": "some name"
                            },
                            "medal": {
                                "type": "string",
                                "example": "some medal"
                            },
                            "position": {
                                "type": "integer",
                                "example": 1
                            },
                            "telegram_id": {
                                "type": "string",
                                "example": "1"
                            },
                            "xp": {
                                "type": "integer",
                                "example": 20
                            }
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "userbalance.ErrorSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "some error"
                },
                "message": {
                    "type": "string",
                    "example": "some error"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "userbalance.GetUserBalanceSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "balance": {
                            "type": "number",
                            "example": 100
                        },
                        "created_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        },
                        "id": {
                            "type": "integer",
                            "example": 1
                        },
                        "telegram_id": {
                            "type": "string",
                            "example": "1"
                        },
                        "updated_at": {
                            "type": "string",
                            "example": "2025-09-02T12:48:06.37622+03:00"
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:50050",
	BasePath:         "/v1.",
	Schemes:          []string{},
	Title:            "Lingramm API — Telegram Web App Backend",
	Description:      "This is the backend API for the Lingramm Telegram Web Application.\nIt provides endpoints for user interactions, game logic, statistics, tools, and more.\nAll endpoints are secured and optimized for real-time communication with Telegram Mini Apps.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
