basePath: /v1.
definitions:
  achievement.AllDetailSwaggerResponse:
    properties:
      data:
        items:
          properties:
            achievement:
              properties:
                achievement_assets_id:
                  example: 1
                  type: integer
                achievement_type_id:
                  example: 3
                  type: integer
                award_assets_id:
                  example: 1
                  type: integer
                created_at:
                  example: "2025-09-02T12:48:06.37622+03:00"
                  type: string
                description:
                  example: description
                  type: string
                id:
                  example: 1
                  type: integer
                name:
                  example: two dialogs
                  type: string
                updated_at:
                  example: "2025-09-02T12:48:06.37622+03:00"
                  type: string
              type: object
            achievement_assets:
              properties:
                client_path_file:
                  example: /images/achievement/01K44X76FBXJYK4D153WHZFXH7.webp
                  type: string
                created_at:
                  example: "2025-09-02T12:48:06.37622+03:00"
                  type: string
                extension:
                  example: .webp
                  type: string
                id:
                  example: 1
                  type: integer
                name_file:
                  example: 01K44X76FBXJYK4D153WHZFXH7.webp
                  type: string
                name_file_without_extension:
                  example: 01K44X76FBXJYK4D153WHZFXH7
                  type: string
                old_extension:
                  example: .png
                  type: string
                old_name_file:
                  example: img.png
                  type: string
                quality:
                  example: 30
                  type: integer
                server_path_file:
                  example: testdata/file_server/images/achievement/01K44X76FBXJYK4D153WHZFXH7.webp
                  type: string
                updated_at:
                  example: "2025-09-02T12:48:06.37622+03:00"
                  type: string
              type: object
            award_assets:
              properties:
                client_path_file:
                  example: /images/award/01K44X76GAFBZBJ1W1WX4NSJT4.webp
                  type: string
                created_at:
                  example: "2025-09-02T12:48:06.37622+03:00"
                  type: string
                extension:
                  example: .webp
                  type: string
                id:
                  example: 1
                  type: integer
                name_file:
                  example: 01K44X76GAFBZBJ1W1WX4NSJT4.webp
                  type: string
                name_file_without_extension:
                  example: 01K44X76GAFBZBJ1W1WX4NSJT4
                  type: string
                old_extension:
                  example: .jpg
                  type: string
                old_name_file:
                  example: img.jpg
                  type: string
                quality:
                  example: 30
                  type: integer
                server_path_file:
                  example: testdata/file_server/images/award/01K44X76GAFBZBJ1W1WX4NSJT4.webp
                  type: string
                updated_at:
                  example: "2025-09-02T12:48:06.37622+03:00"
                  type: string
              type: object
          type: object
        type: array
      error:
        example: ""
        type: string
      message:
        example: success
        type: string
      status:
        example: true
        type: boolean
    type: object
  achievement.DetailSwaggerResponse:
    properties:
      data:
        properties:
          achievement:
            properties:
              achievement_assets_id:
                example: 1
                type: integer
              achievement_type_id:
                example: 3
                type: integer
              award_assets_id:
                example: 1
                type: integer
              created_at:
                example: "2025-09-02T12:48:06.37622+03:00"
                type: string
              description:
                example: description
                type: string
              id:
                example: 1
                type: integer
              name:
                example: two dialogs
                type: string
              updated_at:
                example: "2025-09-02T12:48:06.37622+03:00"
                type: string
            type: object
          achievement_assets:
            properties:
              client_path_file:
                example: /images/achievement/01K44X76FBXJYK4D153WHZFXH7.webp
                type: string
              created_at:
                example: "2025-09-02T12:48:06.37622+03:00"
                type: string
              extension:
                example: .webp
                type: string
              id:
                example: 1
                type: integer
              name_file:
                example: 01K44X76FBXJYK4D153WHZFXH7.webp
                type: string
              name_file_without_extension:
                example: 01K44X76FBXJYK4D153WHZFXH7
                type: string
              old_extension:
                example: .png
                type: string
              old_name_file:
                example: img.png
                type: string
              quality:
                example: 30
                type: integer
              server_path_file:
                example: testdata/file_server/images/achievement/01K44X76FBXJYK4D153WHZFXH7.webp
                type: string
              updated_at:
                example: "2025-09-02T12:48:06.37622+03:00"
                type: string
            type: object
          award_assets:
            properties:
              client_path_file:
                example: /images/award/01K44X76GAFBZBJ1W1WX4NSJT4.webp
                type: string
              created_at:
                example: "2025-09-02T12:48:06.37622+03:00"
                type: string
              extension:
                example: .webp
                type: string
              id:
                example: 1
                type: integer
              name_file:
                example: 01K44X76GAFBZBJ1W1WX4NSJT4.webp
                type: string
              name_file_without_extension:
                example: 01K44X76GAFBZBJ1W1WX4NSJT4
                type: string
              old_extension:
                example: .jpg
                type: string
              old_name_file:
                example: img.jpg
                type: string
              quality:
                example: 30
                type: integer
              server_path_file:
                example: testdata/file_server/images/award/01K44X76GAFBZBJ1W1WX4NSJT4.webp
                type: string
              updated_at:
                example: "2025-09-02T12:48:06.37622+03:00"
                type: string
            type: object
        type: object
      error:
        example: ""
        type: string
      message:
        example: success
        type: string
      status:
        example: true
        type: boolean
    type: object
  achievement.ErrorSwaggerResponse:
    properties:
      data: {}
      error:
        example: some error
        type: string
      message:
        example: some error
        type: string
      status:
        example: false
        type: boolean
    type: object
  admin.AddAdminUserSwaggerResponse:
    properties:
      data:
        properties:
          created_at:
            example: "2025-09-02T12:48:06.37622+03:00"
            type: string
          id:
            example: 1
            type: integer
          telegram_id:
            example: "1"
            type: string
          updated_at:
            example: "2025-09-02T12:48:06.37622+03:00"
            type: string
        type: object
      error:
        example: ""
        type: string
      message:
        example: success
        type: string
      status:
        example: true
        type: boolean
    type: object
  admin.ErrorSwaggerResponse:
    properties:
      data: {}
      error:
        example: some error
        type: string
      message:
        example: some error
        type: string
      status:
        example: false
        type: boolean
    type: object
  admin.ExistsSwaggerResponse:
    properties:
      data:
        example: true
        type: boolean
      error:
        example: ""
        type: string
      message:
        example: success
        type: string
      status:
        example: true
        type: boolean
    type: object
  auth.CheckDTO:
    properties:
      telegram_id:
        minLength: 1
        type: string
      token:
        minLength: 1
        type: string
    required:
    - telegram_id
    - token
    type: object
  auth.CheckSwaggerResponse:
    properties:
      data:
        properties:
          exp_at:
            example: "2025-09-02T15:30:20.095307198+03:00"
            type: string
          telegram_id:
            example: "1"
            type: string
          token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTY4MTYyMjAsImlhdCI6MTc1NjgxMjYyMH0.F39iYi6QaEEeQ9pTBO4HL_sOyfaAjRJs7IQiCSQihGE
            type: string
        type: object
      error:
        example: ""
        type: string
      message:
        example: success
        type: string
      status:
        example: true
        type: boolean
    type: object
  auth.ErrorSwaggerResponse:
    properties:
      data: {}
      error:
        example: some error
        type: string
      message:
        example: some error
        type: string
      status:
        example: false
        type: boolean
    type: object
  auth.RefreshDTO:
    properties:
      refresh_token:
        minLength: 1
        type: string
      telegram_id:
        minLength: 1
        type: string
    required:
    - refresh_token
    - telegram_id
    type: object
  auth.RefreshSwaggerResponse:
    properties:
      data:
        properties:
          access_exp_at:
            example: "2025-09-02T15:30:20.095307198+03:00"
            type: string
          access_token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTY4MTYyMjAsImlhdCI6MTc1NjgxMjYyMH0.F39iYi6QaEEeQ9pTBO4HL_sOyfaAjRJs7IQiCSQihGE
            type: string
          refresh_exp_at:
            example: "2025-09-02T15:30:20.095307198+03:00"
            type: string
          refresh_token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTc0MTc0MjAsImlhdCI6MTc1NjgxMjYyMH0.BTdkTO_6gMG_zmGi1kse2bXoTJ9iU5SZUSl6Pp4upYk
            type: string
        type: object
      error:
        example: ""
        type: string
      message:
        example: success
        type: string
      status:
        example: true
        type: boolean
    type: object
  auth.SignInDTO:
    properties:
      first_name:
        minLength: 1
        type: string
      last_name:
        minLength: 1
        type: string
      telegram_id:
        minLength: 1
        type: string
      username:
        minLength: 1
        type: string
    required:
    - telegram_id
    type: object
  auth.SignInSwaggerResponse:
    properties:
      data:
        properties:
          access_exp_at:
            example: "2025-09-02T15:30:20.095307198+03:00"
            type: string
          access_token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTY4MTYyMjAsImlhdCI6MTc1NjgxMjYyMH0.F39iYi6QaEEeQ9pTBO4HL_sOyfaAjRJs7IQiCSQihGE
            type: string
          refresh_exp_at:
            example: "2025-09-02T15:30:20.095307198+03:00"
            type: string
          refresh_token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjEyMzQ1Njc4OTAiLCJleHAiOjE3NTc0MTc0MjAsImlhdCI6MTc1NjgxMjYyMH0.BTdkTO_6gMG_zmGi1kse2bXoTJ9iU5SZUSl6Pp4upYk
            type: string
        type: object
      error:
        example: ""
        type: string
      message:
        example: success
        type: string
      status:
        example: true
        type: boolean
    type: object
  dailytask.CreateDTO:
    properties:
      dialog_completed_need:
        type: integer
      experience_points_need:
        type: integer
      is_active:
        type: boolean
      lessons_finished_need:
        type: integer
      tasks_completed_need:
        type: integer
      words_learned_need:
        type: integer
      words_translate_need:
        type: integer
    type: object
  dailytask.CreateDailyTaskSwaggerResponse:
    properties:
      data:
        properties:
          created_at:
            example: "2025-09-02T12:48:06.37622+03:00"
            type: string
          dialog_completed_need:
            example: 1
            type: integer
          experience_points_need:
            example: 1
            type: integer
          id:
            example: 1
            type: integer
          is_active:
            example: true
            type: boolean
          lessons_finished_need:
            example: 1
            type: integer
          tasks_completed_need:
            example: 1
            type: integer
          updated_at:
            example: "2025-09-02T12:48:06.37622+03:00"
            type: string
          words_learned_need:
            example: 1
            type: integer
          words_translate_need:
            example: 1
            type: integer
        type: object
      error:
        example: ""
        type: string
      message:
        example: success
        type: string
      status:
        example: true
        type: boolean
    type: object
  dailytask.ErrorSwaggerResponse:
    properties:
      data: {}
      error:
        example: some error
        type: string
      message:
        example: some error
        type: string
      status:
        example: false
        type: boolean
    type: object
  event.Actions:
    properties:
      dialog_completed:
        type: integer
      lessons_finished:
        type: integer
      tasks_completed:
        type: integer
      words_learned:
        type: integer
      words_translate:
        type: integer
    type: object
  event.CreateEventsDTO:
    properties:
      actions:
        $ref: '#/definitions/event.Actions'
      event_type:
        maxLength: 50
        minLength: 1
        type: string
      telegram_id:
        minLength: 1
        type: string
    required:
    - actions
    - event_type
    - telegram_id
    type: object
  event.CreateSwaggerResponse:
    properties:
      data: {}
      error:
        example: ""
        type: string
      message:
        example: success
        type: string
      status:
        example: true
        type: boolean
    type: object
  event.ErrorSwaggerResponse:
    properties:
      data: {}
      error:
        example: some error
        type: string
      message:
        example: some error
        type: string
      status:
        example: false
        type: boolean
    type: object
host: localhost:50050
info:
  contact: {}
  description: |-
    This is the backend API for the Lingramm Telegram Web Application.
    It provides endpoints for user interactions, game logic, statistics, tools, and more.
    All endpoints are secured and optimized for real-time communication with Telegram Mini Apps.
  title: Lingramm API — Telegram Web App Backend
  version: "1.0"
paths:
  /v1/achievement:
    post:
      consumes:
      - multipart/form-data
      description: Creates an achievement with name, type, optional description, and
        uploads for achievement & award images (multipart/form-data).
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Achievement name
        in: formData
        name: name
        required: true
        type: string
      - description: Achievement type identifier
        in: formData
        name: achievement_type
        required: true
        type: string
      - description: Optional description
        in: formData
        name: description
        type: string
      - description: Achievement image file
        in: formData
        name: file_achievement
        required: true
        type: file
      - description: Award image file
        in: formData
        name: file_award
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/achievement.DetailSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/achievement.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/achievement.ErrorSwaggerResponse'
      summary: Create achievement (admin)
      tags:
      - Achievement
  /v1/achievement/all:
    get:
      consumes:
      - application/json
      description: Returns a full list of achievements with their condition, achievement
        assets and award assets
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/achievement.AllDetailSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/achievement.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/achievement.ErrorSwaggerResponse'
      summary: Get all achievement details (admin)
      tags:
      - Achievement
  /v1/achievement/id/{achievementID}:
    delete:
      consumes:
      - application/json
      description: Deletes the achievement and its related assets by the given achievementID.
        Returns the deleted record.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Achievement ID
        in: path
        name: achievementID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/achievement.DetailSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/achievement.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/achievement.ErrorSwaggerResponse'
      summary: Delete achievement detail by ID (admin)
      tags:
      - Achievement
    get:
      consumes:
      - application/json
      description: Returns the achievement and its related assets (achievement & award)
        by the given achievementID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Achievement ID
        in: path
        name: achievementID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/achievement.DetailSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/achievement.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/achievement.ErrorSwaggerResponse'
      summary: Get achievement detail by ID (admin)
      tags:
      - Achievement
  /v1/admin/add/{telegramID}:
    get:
      consumes:
      - application/json
      description: Grants admin role to the user with the given Telegram ID and returns
        the created admin record.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Telegram ID
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/admin.AddAdminUserSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/admin.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/admin.ErrorSwaggerResponse'
      summary: Add admin user (admin)
      tags:
      - Admin
  /v1/admin/exists/{telegramID}/exists:
    get:
      consumes:
      - application/json
      description: Returns true if a user with the given Telegram ID is an admin,
        false otherwise.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Telegram ID
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/admin.ExistsSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/admin.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/admin.ErrorSwaggerResponse'
      summary: Check admin existence by Telegram ID (admin)
      tags:
      - Admin
  /v1/auth/check:
    post:
      consumes:
      - application/json
      description: Check if the provided Telegram ID and token are valid
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Check request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.CheckDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful check user token
          schema:
            $ref: '#/definitions/auth.CheckSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/auth.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorSwaggerResponse'
      summary: Check user token
      tags:
      - Authentication
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the access token using the provided Telegram ID and refresh
        token
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Refresh request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with new tokens
          schema:
            $ref: '#/definitions/auth.RefreshSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/auth.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorSwaggerResponse'
      summary: Refresh user token
      tags:
      - Authentication
  /v1/auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in a user using their Telegram ID, username, first name, and
        last name
      parameters:
      - description: Sign in request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.SignInDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with tokens
          schema:
            $ref: '#/definitions/auth.SignInSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/auth.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorSwaggerResponse'
      summary: Sign in user
      tags:
      - Authentication
  /v1/bigcache/info:
    get:
      consumes:
      - application/json
      description: Iterates over BigCache and returns a map of entries (keys/values)
        for inspection.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with BigCache entries
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Iterate BigCache (admin)
      tags:
      - Big cache
  /v1/daily_task:
    post:
      consumes:
      - application/json
      description: Creates a daily task record. **At least one** of the `*_need` fields
        must be provided and greater than 0.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Daily task data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dailytask.CreateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/dailytask.CreateDailyTaskSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/dailytask.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dailytask.ErrorSwaggerResponse'
      summary: Create daily task (admin)
      tags:
      - Daily task
  /v1/event:
    post:
      consumes:
      - application/json
      description: 'Creates an events payload for a user: specify `telegram_id`, an
        `event_type`, and optional action counters (each provided value must be >
        0).'
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Events payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/event.CreateEventsDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/event.CreateSwaggerResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/event.ErrorSwaggerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/event.ErrorSwaggerResponse'
      summary: Create events
      tags:
      - Event
swagger: "2.0"
