// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	admin "github.com/go-jedi/lingvogramm_backend/internal/domain/admin"

	mock "github.com/stretchr/testify/mock"
)

// IAdmin is an autogenerated mock type for the IAdmin type
type IAdmin struct {
	mock.Mock
}

// All provides a mock function with given fields: prefix
func (_m *IAdmin) All(prefix string) ([]admin.Admin, error) {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []admin.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]admin.Admin, error)); ok {
		return rf(prefix)
	}
	if rf, ok := ret.Get(0).(func(string) []admin.Admin); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: key, prefix
func (_m *IAdmin) Delete(key string, prefix string) error {
	ret := _m.Called(key, prefix)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, prefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: key, prefix
func (_m *IAdmin) Exists(key string, prefix string) (bool, error) {
	ret := _m.Called(key, prefix)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(key, prefix)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(key, prefix)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key, prefix
func (_m *IAdmin) Get(key string, prefix string) (admin.Admin, error) {
	ret := _m.Called(key, prefix)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 admin.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (admin.Admin, error)); ok {
		return rf(key, prefix)
	}
	if rf, ok := ret.Get(0).(func(string, string) admin.Admin); ok {
		r0 = rf(key, prefix)
	} else {
		r0 = ret.Get(0).(admin.Admin)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrefixTelegramID provides a mock function with no fields
func (_m *IAdmin) GetPrefixTelegramID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrefixTelegramID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Set provides a mock function with given fields: key, val, prefix
func (_m *IAdmin) Set(key string, val admin.Admin, prefix string) error {
	ret := _m.Called(key, val, prefix)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, admin.Admin, string) error); ok {
		r0 = rf(key, val, prefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAdmin creates a new instance of IAdmin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAdmin(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAdmin {
	mock := &IAdmin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
