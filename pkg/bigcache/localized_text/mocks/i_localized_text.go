// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	localized_text "github.com/go-jedi/lingramm_backend/internal/domain/localized_text"

	mock "github.com/stretchr/testify/mock"
)

// ILocalizedText is an autogenerated mock type for the ILocalizedText type
type ILocalizedText struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *ILocalizedText) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *ILocalizedText) Get(key string) (map[string][]localized_text.LocalizedTexts, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 map[string][]localized_text.LocalizedTexts
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string][]localized_text.LocalizedTexts, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) map[string][]localized_text.LocalizedTexts); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]localized_text.LocalizedTexts)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, val
func (_m *ILocalizedText) Set(key string, val map[string][]localized_text.LocalizedTexts) error {
	ret := _m.Called(key, val)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string][]localized_text.LocalizedTexts) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewILocalizedText creates a new instance of ILocalizedText. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILocalizedText(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILocalizedText {
	mock := &ILocalizedText{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
