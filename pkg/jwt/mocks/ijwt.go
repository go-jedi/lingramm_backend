// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	jwt "github.com/go-jedi/lingvogramm_backend/pkg/jwt"
	mock "github.com/stretchr/testify/mock"
)

// IJWT is an autogenerated mock type for the IJWT type
type IJWT struct {
	mock.Mock
}

// Generate provides a mock function with given fields: telegramID
func (_m *IJWT) Generate(telegramID string) (jwt.GenerateResp, error) {
	ret := _m.Called(telegramID)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 jwt.GenerateResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (jwt.GenerateResp, error)); ok {
		return rf(telegramID)
	}
	if rf, ok := ret.Get(0).(func(string) jwt.GenerateResp); ok {
		r0 = rf(telegramID)
	} else {
		r0 = ret.Get(0).(jwt.GenerateResp)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: token
func (_m *IJWT) ParseToken(token string) (jwt.VerifyResp, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 jwt.VerifyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (jwt.VerifyResp, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) jwt.VerifyResp); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(jwt.VerifyResp)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: telegramID, token
func (_m *IJWT) Verify(telegramID string, token string) (jwt.VerifyResp, error) {
	ret := _m.Called(telegramID, token)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 jwt.VerifyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (jwt.VerifyResp, error)); ok {
		return rf(telegramID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) jwt.VerifyResp); ok {
		r0 = rf(telegramID, token)
	} else {
		r0 = ret.Get(0).(jwt.VerifyResp)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(telegramID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIJWT creates a new instance of IJWT. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIJWT(t interface {
	mock.TestingT
	Cleanup(func())
}) *IJWT {
	mock := &IJWT{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
