// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	eventtype "github.com/go-jedi/lingramm_backend/internal/domain/event_type"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// IAllByNames is an autogenerated mock type for the IAllByNames type
type IAllByNames struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, tx, names
func (_m *IAllByNames) Execute(ctx context.Context, tx pgx.Tx, names []string) ([]eventtype.EventType, error) {
	ret := _m.Called(ctx, tx, names)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []eventtype.EventType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, []string) ([]eventtype.EventType, error)); ok {
		return rf(ctx, tx, names)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, []string) []eventtype.EventType); ok {
		r0 = rf(ctx, tx, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]eventtype.EventType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, []string) error); ok {
		r1 = rf(ctx, tx, names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAllByNames creates a new instance of IAllByNames. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAllByNames(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAllByNames {
	mock := &IAllByNames{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
