// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	achievement "github.com/go-jedi/lingramm_backend/internal/domain/achievement"

	mock "github.com/stretchr/testify/mock"
)

// IDeleteDetailByAchievementID is an autogenerated mock type for the IDeleteDetailByAchievementID type
type IDeleteDetailByAchievementID struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, achievementID
func (_m *IDeleteDetailByAchievementID) Execute(ctx context.Context, achievementID int64) (achievement.Detail, error) {
	ret := _m.Called(ctx, achievementID)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 achievement.Detail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (achievement.Detail, error)); ok {
		return rf(ctx, achievementID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) achievement.Detail); ok {
		r0 = rf(ctx, achievementID)
	} else {
		r0 = ret.Get(0).(achievement.Detail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, achievementID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIDeleteDetailByAchievementID creates a new instance of IDeleteDetailByAchievementID. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDeleteDetailByAchievementID(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDeleteDetailByAchievementID {
	mock := &IDeleteDetailByAchievementID{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
